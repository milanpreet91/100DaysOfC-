#include <iostream>

using namespace std;

//before C++11
//if you want your class to become uncopyable
//make copy constructor and assignment operator private

//After C++11
//equate copy constructor = delete to prevent copying of objects
//AO = delete to prevent assignment

//
class test {
public:
    int ab;
    string b;
    test(int a, string s) {
        ab = a;
        s = b;
    }
    test(const test&) = delete; // copy constructor must be ignored by compiler, so class object is uncopyable  
    test& operator =(const test&) = delete; //AO: AO must be ignored by compiler, so class obj is unassignable
    test(test&&) = default; // move constructor is defaulted, so default move constructor will be generated by compiler
    //defaulted, to show that compiler will 
    //generate default move constructor for the class
    test& operator=(test&&) = default; // tells compiler to generate default move assignment operator
    //move AO is defaulted to show us that compiler will generate 
    //default move AO for the class.
    //This is better for reasability as compiler 
    //generates default coinstructors implicitly
    //so'll have idea about special constructors
    //also, we won't need to add and manage default constructors 
    //compiler will handle it, we just need to know which special constructpors are being generated defaultly
    //can also default the comstructor of class
    test() = default; // tells compiler to generate defualt constructor for all members of class 
};
int main(){
    test t1(1,"hey"), t2(2,"you!");
    cout << "t1 is " << t1.ab << " " << t1.b << endl;
    cout << "t2 is " << t2.ab << " " << t2.b << endl;
    test t3(move(t1)); // calls move constructor //gives error as CC is private
    t2 = move(t1); // calls move assignment operator // gives error as AO is private
    cout << "t3 is " << t3.ab << " " << t3.b << endl;

}
